"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const rename_1 = require("./rename");
function register(context) {
    return (oldUri, newUri) => __awaiter(this, void 0, void 0, function* () {
        const vueDocument = context.vueDocuments.get(oldUri);
        if (vueDocument) {
            oldUri += '.ts';
            newUri += '.ts';
        }
        const plugins = context.getPlugins();
        for (const plugin of plugins) {
            if (!plugin.doFileRename)
                continue;
            const workspaceEdit = yield plugin.doFileRename(oldUri, newUri);
            if (workspaceEdit) {
                return (0, rename_1.embeddedEditToSourceEdit)(workspaceEdit, context.vueDocuments);
            }
        }
    });
}
exports.register = register;
//# sourceMappingURL=fileRename.js.map