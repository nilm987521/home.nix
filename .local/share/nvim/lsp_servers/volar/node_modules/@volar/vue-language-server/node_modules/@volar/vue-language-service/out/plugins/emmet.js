"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
const emmet = require("@vscode/emmet-helper");
function default_1() {
    return {
        complete: {
            // https://docs.emmet.io/abbreviations/syntax/
            triggerCharacters: '>+^*()#.[]$@-{}'.split(''),
            isAdditional: true,
            on(textDocument, position) {
                return __awaiter(this, void 0, void 0, function* () {
                    const syntax = emmet.getEmmetMode(textDocument.languageId === 'vue' ? 'html' : textDocument.languageId);
                    if (!syntax)
                        return;
                    // monkey fix https://github.com/johnsoncodehk/volar/issues/1105
                    if (syntax === 'jsx')
                        return;
                    const emmetConfig = yield getEmmetConfig(syntax);
                    return emmet.doComplete(textDocument, position, syntax, emmetConfig);
                });
            },
        },
    };
    function getEmmetConfig(syntax) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const emmetConfig = (_b = yield ((_a = (0, vue_language_service_types_1.useConfigurationHost)()) === null || _a === void 0 ? void 0 : _a.getConfiguration('emmet'))) !== null && _b !== void 0 ? _b : {};
            const syntaxProfiles = Object.assign({}, emmetConfig['syntaxProfiles'] || {});
            const preferences = Object.assign({}, emmetConfig['preferences'] || {});
            // jsx, xml and xsl syntaxes need to have self closing tags unless otherwise configured by user
            if (syntax === 'jsx' || syntax === 'xml' || syntax === 'xsl') {
                syntaxProfiles[syntax] = syntaxProfiles[syntax] || {};
                if (typeof syntaxProfiles[syntax] === 'object'
                    && !syntaxProfiles[syntax].hasOwnProperty('self_closing_tag') // Old Emmet format
                    && !syntaxProfiles[syntax].hasOwnProperty('selfClosingStyle') // Emmet 2.0 format
                ) {
                    syntaxProfiles[syntax] = Object.assign(Object.assign({}, syntaxProfiles[syntax]), { selfClosingStyle: 'xml' });
                }
            }
            return {
                preferences,
                showExpandedAbbreviation: emmetConfig['showExpandedAbbreviation'],
                showAbbreviationSuggestions: emmetConfig['showAbbreviationSuggestions'],
                syntaxProfiles,
                variables: emmetConfig['variables'],
                excludeLanguages: emmetConfig['excludeLanguages'],
                showSuggestionsAsSnippets: emmetConfig['showSuggestionsAsSnippets']
            };
        });
    }
}
exports.default = default_1;
//# sourceMappingURL=emmet.js.map