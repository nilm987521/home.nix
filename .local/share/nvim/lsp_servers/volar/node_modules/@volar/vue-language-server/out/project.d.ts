import * as shared from '@volar/shared';
import * as vue from '@volar/vue-language-service';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type { TextDocument } from 'vscode-languageserver-textdocument';
import * as vscode from 'vscode-languageserver';
import type { createLsConfigs } from './configHost';
import { RuntimeEnvironment } from './common';
export interface Project extends ReturnType<typeof createProject> {
}
export declare const fileRenamings: Set<Promise<void>>;
export declare const renameFileContentCache: Map<string, string>;
export declare function createProject(runtimeEnv: RuntimeEnvironment, ts: typeof import('typescript/lib/tsserverlibrary'), options: shared.ServerInitializationOptions, rootPath: string, tsConfig: string | ts.CompilerOptions, tsLocalized: ts.MapLike<string> | undefined, documents: vscode.TextDocuments<TextDocument>, connection: vscode.Connection, lsConfigs: ReturnType<typeof createLsConfigs> | undefined): Promise<{
    onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
    onDocumentUpdated: (document: TextDocument) => Promise<void>;
    getLanguageService: () => vue.LanguageService;
    getLanguageServiceDontCreate: () => vue.LanguageService | undefined;
    getParsedCommandLine: () => ts.ParsedCommandLine & {
        vueOptions: {
            experimentalCompatMode?: 2 | 3 | undefined;
            experimentalTemplateCompilerOptions?: any;
            experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
        };
    };
    dispose: () => void;
}>;
export declare function getScriptText(documents: vscode.TextDocuments<TextDocument>, fileName: string, sys: typeof import('typescript/lib/tsserverlibrary')['sys']): string | undefined;
