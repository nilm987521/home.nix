"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const transforms_1 = require("@volar/transforms");
const vscode = require("vscode-languageserver-protocol");
const featureWorkers_1 = require("../utils/featureWorkers");
function register(context) {
    return (uri, range) => __awaiter(this, void 0, void 0, function* () {
        const document = context.getTextDocument(uri);
        if (!document)
            return;
        const offsetRange = {
            start: document.offsetAt(range.start),
            end: document.offsetAt(range.end),
        };
        return (0, featureWorkers_1.languageFeatureWorker)(context, uri, range, (arg, sourceMap) => {
            /**
             * copy from ./codeActions.ts
             */
            var _a;
            if (!sourceMap.embeddedFile.capabilities.inlayHints)
                return [];
            let minStart;
            let maxEnd;
            for (const mapping of sourceMap.mappings) {
                const overlapRange = shared.getOverlapRange2(offsetRange, mapping.sourceRange);
                if (overlapRange) {
                    const embeddedRange = (_a = sourceMap.getMappedRange(overlapRange.start, overlapRange.end)) === null || _a === void 0 ? void 0 : _a[0];
                    if (embeddedRange) {
                        minStart = minStart === undefined ? embeddedRange.start : Math.min(embeddedRange.start, minStart);
                        maxEnd = maxEnd === undefined ? embeddedRange.end : Math.max(embeddedRange.end, maxEnd);
                    }
                }
            }
            if (minStart !== undefined && maxEnd !== undefined) {
                return [vscode.Range.create(sourceMap.mappedDocument.positionAt(minStart), sourceMap.mappedDocument.positionAt(maxEnd))];
            }
            return [];
        }, (plugin, document, arg, sourceMap) => {
            var _a, _b;
            return (_b = (_a = plugin.inlayHints) === null || _a === void 0 ? void 0 : _a.on) === null || _b === void 0 ? void 0 : _b.call(_a, document, arg);
        }, (inlayHints, sourceMap) => inlayHints.map(_inlayHint => {
            var _a, _b;
            if (!sourceMap)
                return _inlayHint;
            const position = (_a = sourceMap.getSourceRange(_inlayHint.position, _inlayHint.position, data => !!data.capabilities.completion)) === null || _a === void 0 ? void 0 : _a[0].start;
            const edits = (_b = _inlayHint.textEdits) === null || _b === void 0 ? void 0 : _b.map(textEdit => (0, transforms_1.transformTextEdit)(textEdit, range => { var _a; return (_a = sourceMap.getSourceRange(range.start, range.end)) === null || _a === void 0 ? void 0 : _a[0]; })).filter(shared.notEmpty);
            if (position) {
                return Object.assign(Object.assign({}, _inlayHint), { position,
                    edits });
            }
        }).filter(shared.notEmpty), arr => arr.flat());
    });
}
exports.register = register;
//# sourceMappingURL=inlayHints.js.map