"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStylesheetExtra = void 0;
const shared = require("@volar/shared");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const cssClasses_1 = require("./utils/cssClasses");
function createStylesheetExtra(cssPlugin) {
    const embeddedDocuments = new WeakMap();
    const stylesheetClasses = new WeakMap();
    const embeddedDocumentVersions = new Map();
    return {
        getCssClasses,
    };
    function getDocumentFromEmbeddedFile(embeddedFile) {
        var _a;
        let document = embeddedDocuments.get(embeddedFile);
        if (!document) {
            const uri = shared.fsPathToUri(embeddedFile.fileName);
            const newVersion = ((_a = embeddedDocumentVersions.get(uri.toLowerCase())) !== null && _a !== void 0 ? _a : 0) + 1;
            embeddedDocumentVersions.set(uri.toLowerCase(), newVersion);
            document = vscode_languageserver_textdocument_1.TextDocument.create(uri, shared.syntaxToLanguageId(embeddedFile.lang), newVersion, embeddedFile.content);
            embeddedDocuments.set(embeddedFile, document);
        }
        return document;
    }
    function getCssClasses(embeddedFile) {
        var _a, _b;
        const document = getDocumentFromEmbeddedFile(embeddedFile);
        let classes = stylesheetClasses.get(document);
        if (!classes) {
            classes = {};
            const stylesheet = (_a = cssPlugin.getStylesheet) === null || _a === void 0 ? void 0 : _a.call(cssPlugin, document);
            const cssLs = (_b = cssPlugin.getCssLs) === null || _b === void 0 ? void 0 : _b.call(cssPlugin, document.languageId);
            if (stylesheet && cssLs) {
                const classNames = (0, cssClasses_1.findClassNames)(document, stylesheet, cssLs);
                for (const className in classNames) {
                    const offsets = classNames[className];
                    for (const offset of offsets) {
                        if (!classes[className]) {
                            classes[className] = [];
                        }
                        classes[className].push(offset);
                    }
                }
            }
            stylesheetClasses.set(document, classes);
        }
        return classes;
    }
}
exports.createStylesheetExtra = createStylesheetExtra;
//# sourceMappingURL=stylesheetExtra.js.map