"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const featureWorkers_1 = require("../utils/featureWorkers");
function register(context) {
    return (uri) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        const pluginLinks = (_a = yield (0, featureWorkers_1.languageFeatureWorker)(context, uri, undefined, (arg, sourceMap) => [arg], (plugin, document, arg) => { var _a; return (_a = plugin.findDocumentLinks) === null || _a === void 0 ? void 0 : _a.call(plugin, document); }, (data, sourceMap) => data.map(link => {
            var _a;
            if (!sourceMap)
                return link;
            const range = (_a = sourceMap.getSourceRange(link.range.start, link.range.end)) === null || _a === void 0 ? void 0 : _a[0];
            if (range) {
                return Object.assign(Object.assign({}, link), { range });
            }
        }).filter(shared.notEmpty), arr => arr.flat())) !== null && _a !== void 0 ? _a : [];
        const vueDocument = context.vueDocuments.get(uri);
        const fictitiousLinks = vueDocument ? getFictitiousLinks(vueDocument) : [];
        return [
            ...pluginLinks,
            ...fictitiousLinks,
        ];
        function getFictitiousLinks(vueDocument) {
            const result = [];
            const document = vueDocument.getDocument();
            for (const sourceMap of vueDocument.getSourceMaps()) {
                for (const mapped of sourceMap.mappings) {
                    if (!mapped.data.capabilities.displayWithLink)
                        continue;
                    result.push({
                        range: {
                            start: document.positionAt(mapped.sourceRange.start),
                            end: document.positionAt(mapped.sourceRange.end),
                        },
                        target: uri, // TODO
                    });
                }
            }
            return result;
        }
    });
}
exports.register = register;
//# sourceMappingURL=documentLinks.js.map