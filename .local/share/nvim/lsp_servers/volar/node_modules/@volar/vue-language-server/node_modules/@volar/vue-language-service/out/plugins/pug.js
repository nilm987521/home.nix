"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pug = require("@volar/pug-language-service");
function default_1(options) {
    const pugLs = pug.getLanguageService(options.htmlPlugin.htmlLs);
    const pugDocuments = new WeakMap();
    return Object.assign(Object.assign({}, options.htmlPlugin), { pugLs,
        getPugDocument, complete: {
            on(document, position, context) {
                return worker(document, (pugDocument) => {
                    if (!options.documentContext)
                        return;
                    return pugLs.doComplete(pugDocument, position, options.documentContext);
                });
            },
        }, doValidation(document) {
            return worker(document, (pugDocument) => {
                if (pugDocument.error) {
                    return [{
                            code: pugDocument.error.code,
                            message: pugDocument.error.msg,
                            range: {
                                start: { line: pugDocument.error.line, character: pugDocument.error.column },
                                end: { line: pugDocument.error.line, character: pugDocument.error.column },
                            },
                        }];
                }
            });
        },
        doHover(document, position) {
            return worker(document, (pugDocument) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const hoverSettings = yield ((_a = options.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('html.hover', document.uri));
                return pugLs.doHover(pugDocument, position, hoverSettings);
            }));
        },
        findDocumentHighlights(document, position) {
            return worker(document, (pugDocument) => {
                return pugLs.findDocumentHighlights(pugDocument, position);
            });
        },
        findDocumentLinks(document) {
            return worker(document, (pugDocument) => {
                if (!options.documentContext)
                    return;
                return pugLs.findDocumentLinks(pugDocument, options.documentContext);
            });
        },
        findDocumentSymbols(document) {
            return worker(document, (pugDocument) => {
                return pugLs.findDocumentSymbols(pugDocument);
            });
        },
        getFoldingRanges(document) {
            return worker(document, (pugDocument) => {
                return pugLs.getFoldingRanges(pugDocument);
            });
        },
        getSelectionRanges(document, positions) {
            return worker(document, (pugDocument) => {
                return pugLs.getSelectionRanges(pugDocument, positions);
            });
        } });
    function worker(document, callback) {
        const pugDocument = getPugDocument(document);
        if (!pugDocument)
            return;
        return callback(pugDocument);
    }
    function getPugDocument(document) {
        if (document.languageId !== 'jade')
            return;
        const cache = pugDocuments.get(document);
        if (cache) {
            const [cacheVersion, cacheDoc] = cache;
            if (cacheVersion === document.version) {
                return cacheDoc;
            }
        }
        const doc = pugLs.parsePugDocument(document.getText());
        pugDocuments.set(document, [document.version, doc]);
        return doc;
    }
}
exports.default = default_1;
//# sourceMappingURL=pug.js.map