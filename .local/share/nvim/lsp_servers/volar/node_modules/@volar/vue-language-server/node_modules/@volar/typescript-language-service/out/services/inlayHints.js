"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const vscode = require("vscode-languageserver-protocol");
function register(languageService, getTextDocument, settings, ts) {
    return (uri, range) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const document = getTextDocument(uri);
        if (!document)
            return;
        const preferences = (_b = yield ((_a = settings.getPreferences) === null || _a === void 0 ? void 0 : _a.call(settings, document))) !== null && _b !== void 0 ? _b : {};
        const fileName = shared.uriToFsPath(document.uri);
        const start = document.offsetAt(range.start);
        const end = document.offsetAt(range.end);
        const inlayHints = 'provideInlayHints' in languageService ? languageService.provideInlayHints(fileName, { start, length: end - start }, preferences) : [];
        return inlayHints.map(inlayHint => {
            const result = vscode.InlayHint.create(document.positionAt(inlayHint.position), inlayHint.text, inlayHint.kind === ts.InlayHintKind.Type ? vscode.InlayHintKind.Type
                : inlayHint.kind === ts.InlayHintKind.Parameter ? vscode.InlayHintKind.Parameter
                    : undefined);
            result.paddingLeft = inlayHint.whitespaceBefore;
            result.paddingRight = inlayHint.whitespaceAfter;
            return result;
        });
    });
}
exports.register = register;
//# sourceMappingURL=inlayHints.js.map