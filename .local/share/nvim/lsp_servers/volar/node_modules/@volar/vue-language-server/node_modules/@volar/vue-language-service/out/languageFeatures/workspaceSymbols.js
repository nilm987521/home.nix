"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const transforms_1 = require("@volar/transforms");
const vscode = require("vscode-languageserver-protocol");
function register(context) {
    return (query) => __awaiter(this, void 0, void 0, function* () {
        const plugins = context.getPlugins();
        const symbolsList = [];
        for (const plugin of plugins) {
            if (!plugin.findWorkspaceSymbols)
                continue;
            const embeddedSymbols = yield plugin.findWorkspaceSymbols(query);
            if (!embeddedSymbols)
                continue;
            const symbols = (0, transforms_1.transformSymbolInformations)(embeddedSymbols, loc => {
                for (const vueLoc of context.vueDocuments.fromEmbeddedLocation(loc.uri, loc.range.start, loc.range.end)) {
                    return vscode.Location.create(vueLoc.uri, vueLoc.range);
                }
            });
            symbolsList.push(symbols);
        }
        return symbolsList.flat();
    });
}
exports.register = register;
//# sourceMappingURL=workspaceSymbols.js.map