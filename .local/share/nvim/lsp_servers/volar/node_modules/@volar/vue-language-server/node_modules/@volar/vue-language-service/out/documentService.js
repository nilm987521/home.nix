"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocumentService = void 0;
const shared = require("@volar/shared");
const ts2 = require("@volar/typescript-language-service");
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
const vueTs = require("@volar/vue-typescript");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const stylesheetExtra_1 = require("./stylesheetExtra");
const css_1 = require("./plugins/css");
const html_1 = require("./plugins/html");
const json_1 = require("./plugins/json");
const pug_1 = require("./plugins/pug");
const pug_beautify_1 = require("./plugins/pug-beautify");
const typescript_1 = require("./plugins/typescript");
const autoInsert = require("./documentFeatures/autoInsert");
const colorPresentations = require("./documentFeatures/colorPresentations");
const documentColors = require("./documentFeatures/documentColors");
const documentSymbols = require("./documentFeatures/documentSymbols");
const foldingRanges = require("./documentFeatures/foldingRanges");
const format = require("./documentFeatures/format");
const linkedEditingRanges = require("./documentFeatures/linkedEditingRanges");
const selectionRanges = require("./documentFeatures/selectionRanges");
const tsConfigs_1 = require("./tsConfigs");
const sharedServices = require("./utils/sharedLs");
const vueDocuments_1 = require("./vueDocuments");
const vue_autoinsert_parentheses_1 = require("./plugins/vue-autoinsert-parentheses");
const vue_1 = require("./plugins/vue");
function getDocumentService({ typescript: ts }, configurationHost, fileSystemProvider, customPlugins) {
    (0, vue_language_service_types_1.setCurrentConfigurationHost)(configurationHost); // TODO
    const vueDocuments = new WeakMap();
    const tsSettings = (0, tsConfigs_1.getTsSettings)(configurationHost);
    let tsLs;
    // language support plugins
    const vuePlugin = (0, vue_1.default)({
        getVueDocument,
        tsLs: undefined,
    });
    const htmlPlugin = (0, html_1.default)({
        fileSystemProvider,
    });
    const pugPlugin = (0, pug_1.default)({
        configurationHost,
        htmlPlugin,
    });
    const cssPlugin = (0, css_1.default)({
        fileSystemProvider,
    });
    const jsonPlugin = (0, json_1.default)({});
    const tsPlugin = (0, typescript_1.default)({
        tsVersion: ts.version,
        getTsLs: () => tsLs,
    });
    const autoWrapParenthesesPlugin = (0, vue_autoinsert_parentheses_1.default)({
        ts,
        getVueDocument,
    });
    // formatter plugins
    const pugFormatPlugin = (0, pug_beautify_1.default)();
    const formatPlugns = [
        ...customPlugins,
        cssPlugin,
        htmlPlugin,
        pugFormatPlugin,
        jsonPlugin,
        tsPlugin,
    ].map(patchHtmlFormat);
    const vueTsPlugins = [
        vueTs.useHtmlPlugin(),
        vueTs.usePugPlugin(),
    ];
    const stylesheetExtra = (0, stylesheetExtra_1.createStylesheetExtra)(cssPlugin);
    const context = {
        typescript: ts,
        getVueDocument,
        getPlugins() {
            return [
                ...customPlugins,
                vuePlugin,
                htmlPlugin,
                pugPlugin,
                cssPlugin,
                jsonPlugin,
                tsPlugin,
                autoWrapParenthesesPlugin,
            ];
        },
        getFormatPlugins() {
            return formatPlugns;
        },
        updateTsLs(document) {
            if ((0, typescript_1.isTsDocument)(document)) {
                tsLs = sharedServices.getDummyTsLs(context.typescript, ts2, document, tsSettings);
            }
        },
    };
    return {
        format: format.register(context),
        getFoldingRanges: foldingRanges.register(context),
        getSelectionRanges: selectionRanges.register(context),
        findLinkedEditingRanges: linkedEditingRanges.register(context),
        findDocumentSymbols: documentSymbols.register(context),
        findDocumentColors: documentColors.register(context),
        getColorPresentations: colorPresentations.register(context),
        doAutoInsert: autoInsert.register(context),
    };
    function getVueDocument(document) {
        if (document.languageId !== 'vue')
            return;
        let vueDoc = vueDocuments.get(document);
        if (vueDoc) {
            if (vueDoc.file.getVersion() !== document.version.toString()) {
                vueDoc.file.update(document.getText(), document.version.toString());
            }
            return vueDoc;
        }
        const vueFile = vueTs.createVueFile(shared.uriToFsPath(document.uri), document.getText(), document.version.toString(), vueTsPlugins, {}, context.typescript, 'Record<string, string>', stylesheetExtra.getCssClasses, undefined, undefined);
        vueDoc = (0, vueDocuments_1.parseVueDocument)(vueFile);
        vueDocuments.set(document, vueDoc);
        return vueDoc;
    }
}
exports.getDocumentService = getDocumentService;
function patchHtmlFormat(htmlPlugin) {
    const originalFormat = htmlPlugin.format;
    if (originalFormat) {
        htmlPlugin.format = (document, range, options) => __awaiter(this, void 0, void 0, function* () {
            if (document.languageId === 'html') {
                const prefixes = '<template>';
                const suffixes = '</template>';
                const patchDocument = vscode_languageserver_textdocument_1.TextDocument.create(document.uri, document.languageId, document.version, prefixes + document.getText() + suffixes);
                const result = yield (originalFormat === null || originalFormat === void 0 ? void 0 : originalFormat(patchDocument, {
                    start: patchDocument.positionAt(0),
                    end: patchDocument.positionAt(patchDocument.getText().length),
                }, options));
                if (!(result === null || result === void 0 ? void 0 : result.length))
                    return result;
                let newText = vscode_languageserver_textdocument_1.TextDocument.applyEdits(patchDocument, result);
                newText = newText.trim();
                newText = newText.substring(prefixes.length, newText.length - suffixes.length);
                return [{
                        newText,
                        range: {
                            start: document.positionAt(0),
                            end: document.positionAt(document.getText().length),
                        }
                    }];
            }
            return originalFormat === null || originalFormat === void 0 ? void 0 : originalFormat(document, range, options);
        });
    }
    return htmlPlugin;
}
//# sourceMappingURL=documentService.js.map