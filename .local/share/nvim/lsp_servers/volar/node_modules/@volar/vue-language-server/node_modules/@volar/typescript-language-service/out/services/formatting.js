"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
function register(languageService, getTextDocument, settings) {
    return {
        onRange: (uri, options, range) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const document = getTextDocument(uri);
            if (!document)
                return [];
            const fileName = shared.uriToFsPath(document.uri);
            const tsOptions = (_b = yield ((_a = settings.getFormatOptions) === null || _a === void 0 ? void 0 : _a.call(settings, document, options))) !== null && _b !== void 0 ? _b : options;
            let scriptEdits;
            try {
                scriptEdits = range
                    ? languageService.getFormattingEditsForRange(fileName, document.offsetAt(range.start), document.offsetAt(range.end), tsOptions)
                    : languageService.getFormattingEditsForDocument(fileName, tsOptions);
            }
            catch (_c) { }
            if (!scriptEdits)
                return [];
            const result = [];
            for (const textEdit of scriptEdits) {
                result.push({
                    range: {
                        start: document.positionAt(textEdit.span.start),
                        end: document.positionAt(textEdit.span.start + textEdit.span.length),
                    },
                    newText: textEdit.newText,
                });
            }
            return result;
        }),
        onType: (uri, options, position, key) => __awaiter(this, void 0, void 0, function* () {
            var _d, _e;
            const document = getTextDocument(uri);
            if (!document)
                return [];
            const fileName = shared.uriToFsPath(document.uri);
            const tsOptions = (_e = yield ((_d = settings.getFormatOptions) === null || _d === void 0 ? void 0 : _d.call(settings, document, options))) !== null && _e !== void 0 ? _e : options;
            let scriptEdits;
            try {
                scriptEdits = languageService.getFormattingEditsAfterKeystroke(fileName, document.offsetAt(position), key, tsOptions);
            }
            catch (_f) { }
            if (!scriptEdits)
                return [];
            const result = [];
            for (const textEdit of scriptEdits) {
                result.push({
                    range: {
                        start: document.positionAt(textEdit.span.start),
                        end: document.positionAt(textEdit.span.start + textEdit.span.length),
                    },
                    newText: textEdit.newText,
                });
            }
            return result;
        }),
    };
}
exports.register = register;
//# sourceMappingURL=formatting.js.map