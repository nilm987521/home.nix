"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const rename_1 = require("./rename");
function register(languageService, getTextDocument, settings) {
    return (codeAction) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const data = codeAction.data;
        const document = getTextDocument(data.uri);
        const [formatOptions, preferences] = document ? yield Promise.all([
            (_b = (_a = settings.getFormatOptions) === null || _a === void 0 ? void 0 : _a.call(settings, document)) !== null && _b !== void 0 ? _b : {},
            (_d = (_c = settings.getPreferences) === null || _c === void 0 ? void 0 : _c.call(settings, document)) !== null && _d !== void 0 ? _d : {},
        ]) : [{}, {}];
        if ((data === null || data === void 0 ? void 0 : data.type) === 'fixAll') {
            const fixs = data.fixIds.map(fixId => {
                try {
                    return languageService.getCombinedCodeFix({ type: 'file', fileName: data.fileName }, fixId, formatOptions, preferences);
                }
                catch (_a) { }
            });
            const changes = fixs.map(fix => { var _a; return (_a = fix === null || fix === void 0 ? void 0 : fix.changes) !== null && _a !== void 0 ? _a : []; }).flat();
            codeAction.edit = (0, rename_1.fileTextChangesToWorkspaceEdit)(changes, getTextDocument);
        }
        else if ((data === null || data === void 0 ? void 0 : data.type) === 'refactor') {
            const editInfo = languageService.getEditsForRefactor(data.fileName, formatOptions, data.range, data.refactorName, data.actionName, preferences);
            if (editInfo) {
                const edit = (0, rename_1.fileTextChangesToWorkspaceEdit)(editInfo.edits, getTextDocument);
                codeAction.edit = edit;
            }
        }
        else if ((data === null || data === void 0 ? void 0 : data.type) === 'organizeImports') {
            const changes = languageService.organizeImports({ type: 'file', fileName: data.fileName }, formatOptions, preferences);
            const edit = (0, rename_1.fileTextChangesToWorkspaceEdit)(changes, getTextDocument);
            codeAction.edit = edit;
        }
        return codeAction;
    });
}
exports.register = register;
//# sourceMappingURL=codeActionResolve.js.map