"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const path = require("upath");
const vscode = require("vscode-languageserver");
function register(connection, documents, projects) {
    connection.onRequest(shared.D3Request.type, (handler) => __awaiter(this, void 0, void 0, function* () {
        // const document = documents.get(handler.uri);
        // if (!document) return;
        // const languageService = await getLanguageService(document.uri);
        // return languageService?.__internal__.getD3(document);
        return undefined; // disable for now
    }));
    connection.onRequest(shared.GetMatchTsConfigRequest.type, (handler) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        return (_a = (yield projects.getProject(handler.uri))) === null || _a === void 0 ? void 0 : _a.tsconfig;
    }));
    connection.onNotification(shared.WriteVirtualFilesNotification.type, () => __awaiter(this, void 0, void 0, function* () {
        const fs = yield Promise.resolve().then(() => require('fs'));
        for (const workspace of projects.workspaces.values()) {
            for (const project of [...workspace.projects.values(), workspace.getInferredProjectDontCreate()].filter(shared.notEmpty)) {
                const ls = yield (yield project).getLanguageServiceDontCreate();
                if (!ls)
                    continue;
                const localTypes = ls.__internal__.tsRuntime.getLocalTypesFiles();
                for (const fileName of localTypes.fileNames) {
                    fs.writeFile(fileName, localTypes.code, () => { });
                }
                const context = yield ls.__internal__.getContext();
                for (const vueDocument of context.vueDocuments.getAll()) {
                    for (const sourceMap of vueDocument.getSourceMaps()) {
                        if (!sourceMap.embeddedFile.isTsHostFile)
                            continue;
                        fs.writeFile(sourceMap.embeddedFile.fileName, sourceMap.mappedDocument.getText(), () => { });
                    }
                }
            }
        }
    }));
    connection.onNotification(shared.VerifyAllScriptsNotification.type, () => __awaiter(this, void 0, void 0, function* () {
        let errors = 0;
        let warnings = 0;
        const progress = yield connection.window.createWorkDoneProgress();
        progress.begin('Verify', 0, '', true);
        for (const workspace of projects.workspaces.values()) {
            for (const project of [...workspace.projects.values(), workspace.getInferredProjectDontCreate()].filter(shared.notEmpty)) {
                const ls = yield (yield project).getLanguageServiceDontCreate();
                if (!ls)
                    continue;
                const context = yield ls.__internal__.getContext();
                const allVueDocuments = context.vueDocuments.getAll();
                let i = 0;
                for (const vueFile of allVueDocuments) {
                    progress.report(i++ / allVueDocuments.length * 100, path.relative(ls.__internal__.rootPath, shared.uriToFsPath(vueFile.uri)));
                    if (progress.token.isCancellationRequested) {
                        continue;
                    }
                    let _result = yield ls.doValidation(vueFile.uri);
                    connection.sendDiagnostics({ uri: vueFile.uri, diagnostics: _result });
                    errors += _result.filter(error => error.severity === vscode.DiagnosticSeverity.Error).length;
                    warnings += _result.filter(error => error.severity === vscode.DiagnosticSeverity.Warning).length;
                }
            }
        }
        progress.done();
        connection.window.showInformationMessage(`Verification complete. Found ${errors} errors and ${warnings} warnings.`);
    }));
    connection.onRequest(shared.DetectDocumentNameCasesRequest.type, (handler) => __awaiter(this, void 0, void 0, function* () {
        const languageService = yield getLanguageService(handler.uri);
        return languageService === null || languageService === void 0 ? void 0 : languageService.__internal__.detectTagNameCase(handler.uri);
    }));
    function getLanguageService(uri) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const project = (_a = (yield projects.getProject(uri))) === null || _a === void 0 ? void 0 : _a.project;
            return project === null || project === void 0 ? void 0 : project.getLanguageService();
        });
    }
}
exports.register = register;
//# sourceMappingURL=customFeatures.js.map