"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const vscode = require("vscode-languageserver-protocol");
const featureWorkers_1 = require("../utils/featureWorkers");
function register(context) {
    return (uri, range, cancleToken, reportProgress) => {
        const document = context.getTextDocument(uri);
        if (!document)
            return;
        const offsetRange = range ? {
            start: document.offsetAt(range.start),
            end: document.offsetAt(range.end),
        } : {
            start: 0,
            end: document.getText().length,
        };
        return (0, featureWorkers_1.languageFeatureWorker)(context, uri, offsetRange, function* (offsetRange, sourceMap) {
            if (cancleToken === null || cancleToken === void 0 ? void 0 : cancleToken.isCancellationRequested)
                return;
            for (const mapping of sourceMap.mappings) {
                if (cancleToken === null || cancleToken === void 0 ? void 0 : cancleToken.isCancellationRequested)
                    return;
                if (mapping.data.capabilities.semanticTokens
                    && mapping.sourceRange.end > offsetRange.start
                    && mapping.sourceRange.start < offsetRange.end) {
                    yield mapping.mappedRange;
                }
            }
        }, (plugin, document, offsetRange) => {
            var _a;
            return (_a = plugin.findDocumentSemanticTokens) === null || _a === void 0 ? void 0 : _a.call(plugin, document, vscode.Range.create(document.positionAt(offsetRange.start), document.positionAt(offsetRange.end)), cancleToken);
        }, (tokens, sourceMap) => tokens.map(_token => {
            var _a;
            if (!sourceMap)
                return _token;
            const _start = sourceMap.mappedDocument.offsetAt({ line: _token[0], character: _token[1] });
            const _end = sourceMap.mappedDocument.offsetAt({ line: _token[0], character: _token[1] + _token[2] });
            const range = (_a = sourceMap.getSourceRange(_start, _end, data => !!data.capabilities.semanticTokens)) === null || _a === void 0 ? void 0 : _a[0];
            if (!range)
                return;
            const start = document.positionAt(range.start);
            const token = [start.line, start.character, range.end - range.start, _token[3], _token[4]];
            return token;
        }).filter(shared.notEmpty), tokens => tokens.flat(), reportProgress);
    };
}
exports.register = register;
//# sourceMappingURL=documentSemanticTokens.js.map