"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRefType = exports.isBlacklistNode = exports.isCharacterTyping = void 0;
const vscode = require("vscode-languageserver-protocol");
const shared = require("@volar/shared");
const shared_1 = require("@vue/shared");
const typescript_1 = require("./typescript");
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
function default_1(options) {
    const asts = new WeakMap();
    return {
        doAutoInsert(document, position, context) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if (!(0, typescript_1.isTsDocument)(document))
                    return;
                if (!isCharacterTyping(document, context))
                    return;
                const enabled = (_b = yield ((_a = (0, vue_language_service_types_1.useConfigurationHost)()) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.autoCompleteRefs'))) !== null && _b !== void 0 ? _b : true;
                if (!enabled)
                    return;
                const sourceFile = getAst(document);
                if (isBlacklistNode(options.ts, sourceFile, document.offsetAt(position)))
                    return;
                const typeDefs = options.getTsLs().findTypeDefinition(document.uri, position);
                if (isRefType(typeDefs, options.getTsLs())) {
                    return '${1:.value}';
                }
            });
        },
    };
    function getAst(tsDoc) {
        let ast = asts.get(tsDoc);
        if (!ast) {
            ast = options.ts.createSourceFile(shared.uriToFsPath(tsDoc.uri), tsDoc.getText(), options.ts.ScriptTarget.Latest);
            asts.set(tsDoc, ast);
        }
        return ast;
    }
}
exports.default = default_1;
function isCharacterTyping(document, options) {
    const lastCharacter = options.lastChange.text[options.lastChange.text.length - 1];
    const rangeStart = options.lastChange.range.start;
    const position = vscode.Position.create(rangeStart.line, rangeStart.character + options.lastChange.text.length);
    const nextCharacter = document.getText(vscode.Range.create(position, document.positionAt(document.offsetAt(position) + 1)));
    if (lastCharacter === undefined) { // delete text
        return false;
    }
    if (options.lastChange.text.indexOf('\n') >= 0) { // multi-line change
        return false;
    }
    return /\w/.test(lastCharacter) && !/\w/.test(nextCharacter);
}
exports.isCharacterTyping = isCharacterTyping;
function isBlacklistNode(ts, node, pos) {
    if (ts.isVariableDeclaration(node) && pos >= node.name.getFullStart() && pos <= node.name.getEnd()) {
        return true;
    }
    else if (ts.isFunctionDeclaration(node) && node.name && pos >= node.name.getFullStart() && pos <= node.name.getEnd()) {
        return true;
    }
    else if (ts.isParameter(node) && pos >= node.name.getFullStart() && pos <= node.name.getEnd()) {
        return true;
    }
    else if (ts.isPropertyAssignment(node) && pos >= node.name.getFullStart() && pos <= node.name.getEnd()) {
        return true;
    }
    else if (ts.isShorthandPropertyAssignment(node)) {
        return true;
    }
    else if (ts.isImportDeclaration(node)) {
        return true;
    }
    else if (ts.isLiteralTypeNode(node)) {
        return true;
    }
    else if (ts.isPropertyAccessExpression(node) && node.name.text === 'value') {
        return true;
    }
    else if (ts.isCallExpression(node)
        && ts.isIdentifier(node.expression)
        && isWatchOrUseFunction(node.expression.text)
        && isTopLevelArgOrArrayTopLevelItemItem(node)) {
        return true;
    }
    else {
        let _isBlacklistNode = false;
        node.forEachChild(node => {
            if (_isBlacklistNode)
                return;
            if (pos >= node.getFullStart() && pos <= node.getEnd()) {
                if (isBlacklistNode(ts, node, pos)) {
                    _isBlacklistNode = true;
                }
            }
        });
        return _isBlacklistNode;
    }
    function isWatchOrUseFunction(fnName) {
        return fnName === 'watch'
            || fnName === 'unref'
            || fnName === 'triggerRef'
            || fnName === 'isRef'
            || (0, shared_1.hyphenate)(fnName).startsWith('use-');
    }
    function isTopLevelArgOrArrayTopLevelItemItem(node) {
        for (const arg of node.arguments) {
            if (pos >= arg.getFullStart() && pos <= arg.getEnd()) {
                if (ts.isIdentifier(arg)) {
                    return true;
                }
                if (ts.isArrayLiteralExpression(arg)) {
                    for (const el of arg.elements) {
                        if (pos >= el.getFullStart() && pos <= el.getEnd()) {
                            return ts.isIdentifier(el);
                        }
                    }
                }
                return false;
            }
        }
    }
}
exports.isBlacklistNode = isBlacklistNode;
function isRefType(typeDefs, tsLs) {
    for (const typeDefine of typeDefs) {
        const uri = vscode.Location.is(typeDefine) ? typeDefine.uri : typeDefine.targetUri;
        const range = vscode.Location.is(typeDefine) ? typeDefine.range : typeDefine.targetSelectionRange;
        if (uri.endsWith('reactivity.d.ts')) {
            const defineDoc = tsLs.__internal__.getTextDocument(uri);
            if (!defineDoc)
                continue;
            const typeName = defineDoc.getText(range);
            switch (typeName) {
                case 'Ref':
                case 'ComputedRef':
                case 'WritableComputedRef':
                    return true;
            }
        }
    }
    return false;
}
exports.isRefType = isRefType;
//# sourceMappingURL=vue-autoinsert-dotvalue.js.map