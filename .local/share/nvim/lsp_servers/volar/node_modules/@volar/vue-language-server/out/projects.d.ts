import * as shared from '@volar/shared';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type { TextDocument } from 'vscode-languageserver-textdocument';
import * as vscode from 'vscode-languageserver';
import { Project } from './project';
import type { createLsConfigs } from './configHost';
import { RuntimeEnvironment } from './common';
export interface Projects extends ReturnType<typeof createProjects> {
}
export declare function createProjects(runtimeEnv: RuntimeEnvironment, rootPaths: string[], ts: typeof import('typescript/lib/tsserverlibrary'), tsLocalized: ts.MapLike<string> | undefined, options: shared.ServerInitializationOptions, documents: vscode.TextDocuments<TextDocument>, connection: vscode.Connection, lsConfigs: ReturnType<typeof createLsConfigs> | undefined, getInferredCompilerOptions: () => Promise<ts.CompilerOptions>): {
    workspaces: Map<string, {
        projects: {
            clear: () => void;
            values: () => IterableIterator<Project>;
            uriDelete: (_uri: string) => boolean;
            uriGet: (_uri: string) => Project | undefined;
            uriHas: (_uri: string) => boolean;
            uriSet: (_uri: string, item: Project) => void;
            fsPathDelete: (_fsPath: string) => boolean;
            fsPathGet: (_fsPath: string) => Project | undefined;
            fsPathHas: (_fsPath: string) => boolean;
            fsPathSet: (_fsPath: string, item: Project) => void;
        };
        getProject: (uri: string) => Promise<{
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: (document: TextDocument) => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine & {
                vueOptions: {
                    experimentalCompatMode?: 2 | 3 | undefined;
                    experimentalTemplateCompilerOptions?: any;
                    experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
                };
            };
            dispose: () => void;
        } | undefined>;
        getProjectAndTsConfig: (uri: string) => Promise<{
            tsconfig: string;
            project: {
                onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
                onDocumentUpdated: (document: TextDocument) => Promise<void>;
                getLanguageService: () => import("@volar/vue-language-service").LanguageService;
                getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine & {
                    vueOptions: {
                        experimentalCompatMode?: 2 | 3 | undefined;
                        experimentalTemplateCompilerOptions?: any;
                        experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
                    };
                };
                dispose: () => void;
            };
        } | undefined>;
        getProjectByCreate: (tsConfig: string) => Project;
        getInferredProject: () => Promise<{
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: (document: TextDocument) => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine & {
                vueOptions: {
                    experimentalCompatMode?: 2 | 3 | undefined;
                    experimentalTemplateCompilerOptions?: any;
                    experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
                };
            };
            dispose: () => void;
        }>;
        getInferredProjectDontCreate: () => Project | undefined;
    }>;
    getProject: (uri: string) => Promise<{
        tsconfig: string;
        project: {
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: (document: TextDocument) => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine & {
                vueOptions: {
                    experimentalCompatMode?: 2 | 3 | undefined;
                    experimentalTemplateCompilerOptions?: any;
                    experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
                };
            };
            dispose: () => void;
        };
    } | {
        tsconfig: undefined;
        project: {
            onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
            onDocumentUpdated: (document: TextDocument) => Promise<void>;
            getLanguageService: () => import("@volar/vue-language-service").LanguageService;
            getLanguageServiceDontCreate: () => import("@volar/vue-language-service").LanguageService | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine & {
                vueOptions: {
                    experimentalCompatMode?: 2 | 3 | undefined;
                    experimentalTemplateCompilerOptions?: any;
                    experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
                };
            };
            dispose: () => void;
        } | undefined;
    } | undefined>;
};
