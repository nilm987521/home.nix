"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const shared = require("@volar/shared");
function register(context) {
    return (document, color, range) => {
        return (0, featureWorkers_1.documentArgFeatureWorker)(context, document, range, sourceMap => sourceMap.embeddedFile.capabilities.documentSymbol, // TODO: add color capabilitie setting
        function* (range, sourceMap) {
            for (const [mappedRange] of sourceMap.getMappedRanges(range.start, range.end)) {
                yield mappedRange;
            }
        }, (plugin, document, range) => { var _a; return (_a = plugin.getColorPresentations) === null || _a === void 0 ? void 0 : _a.call(plugin, document, color, range); }, (data, sourceMap) => data.map(cp => {
            var _a, _b;
            if (!sourceMap)
                return cp;
            if (cp.textEdit) {
                const editRange = (_a = sourceMap.getSourceRange(cp.textEdit.range.start, cp.textEdit.range.end)) === null || _a === void 0 ? void 0 : _a[0];
                if (!editRange)
                    return undefined;
                cp.textEdit.range = editRange;
            }
            if (cp.additionalTextEdits) {
                for (const textEdit of cp.additionalTextEdits) {
                    const editRange = (_b = sourceMap.getSourceRange(textEdit.range.start, textEdit.range.end)) === null || _b === void 0 ? void 0 : _b[0];
                    if (!editRange)
                        return undefined;
                    textEdit.range = editRange;
                }
            }
            return cp;
        }).filter(shared.notEmpty));
    };
}
exports.register = register;
//# sourceMappingURL=colorPresentations.js.map