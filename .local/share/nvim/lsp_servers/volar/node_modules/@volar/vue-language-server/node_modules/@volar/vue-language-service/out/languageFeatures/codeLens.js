"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const featureWorkers_1 = require("../utils/featureWorkers");
const executeCommand_1 = require("./executeCommand");
function register(context) {
    return (uri) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        return (_a = yield (0, featureWorkers_1.languageFeatureWorker)(context, uri, undefined, (arg, sourceMap) => [arg], (plugin, document, arg, sourceMap) => __awaiter(this, void 0, void 0, function* () {
            var _b, _c;
            const codeLens = yield ((_c = (_b = plugin.codeLens) === null || _b === void 0 ? void 0 : _b.on) === null || _c === void 0 ? void 0 : _c.call(_b, document));
            if (codeLens) {
                return codeLens.map(item => {
                    const data = {
                        uri,
                        originalItem: item,
                        pluginId: context.getPluginId(plugin),
                    };
                    const commandArgs = item.command ? [uri, context.getPluginId(plugin), item.command] : undefined;
                    const codeLens = Object.assign(Object.assign({}, item), { command: item.command && commandArgs ? Object.assign(Object.assign({}, item.command), { command: executeCommand_1.executePluginCommand, arguments: commandArgs }) : undefined, data: data });
                    return codeLens;
                });
            }
        }), (data, sourceMap) => data.map(codeLens => {
            var _a;
            if (!sourceMap)
                return codeLens;
            const range = (_a = sourceMap.getSourceRange(codeLens.range.start, codeLens.range.end)) === null || _a === void 0 ? void 0 : _a[0];
            if (range) {
                return Object.assign(Object.assign({}, codeLens), { range });
            }
        }).filter(shared.notEmpty), arr => arr.flat())) !== null && _a !== void 0 ? _a : [];
    });
}
exports.register = register;
//# sourceMappingURL=codeLens.js.map