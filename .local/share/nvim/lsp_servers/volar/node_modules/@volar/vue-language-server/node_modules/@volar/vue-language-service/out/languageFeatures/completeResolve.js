"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const transforms_1 = require("@volar/transforms");
function register(context) {
    return (item, newPosition) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const data = item.data;
        if (data) {
            const plugin = context.getPluginById(data.pluginId);
            if (!plugin)
                return item;
            if (!((_a = plugin.complete) === null || _a === void 0 ? void 0 : _a.resolve))
                return item;
            const originalItem = data.originalItem;
            if (data.sourceMap) {
                const sourceMap = context.vueDocuments.sourceMapFromEmbeddedDocumentUri(data.sourceMap.embeddedDocumentUri);
                if (sourceMap) {
                    const newPosition_2 = newPosition
                        ? (_b = sourceMap.getMappedRange(newPosition, newPosition, data => !!data.capabilities.completion)) === null || _b === void 0 ? void 0 : _b[0].start
                        : undefined;
                    const resolvedItem = yield plugin.complete.resolve(originalItem, newPosition_2);
                    // fix https://github.com/johnsoncodehk/volar/issues/916
                    if (resolvedItem.additionalTextEdits) {
                        for (const edit of resolvedItem.additionalTextEdits) {
                            if (edit.range.start.line === 0
                                && edit.range.start.character === 0
                                && edit.range.end.line === 0
                                && edit.range.end.character === 0) {
                                edit.newText = '\n' + edit.newText;
                            }
                        }
                    }
                    item = (0, transforms_1.transformCompletionItem)(resolvedItem, embeddedRange => {
                        var _a, _b, _c;
                        return (_b = (_a = plugin.resolveEmbeddedRange) === null || _a === void 0 ? void 0 : _a.call(plugin, embeddedRange)) !== null && _b !== void 0 ? _b : (_c = sourceMap.getSourceRange(embeddedRange.start, embeddedRange.end)) === null || _c === void 0 ? void 0 : _c[0];
                    });
                }
            }
            else {
                item = yield plugin.complete.resolve(originalItem);
            }
        }
        // TODO: monkey fix import ts file icon
        if (item.detail !== item.detail + '.ts') {
            item.detail = item.detail;
        }
        return item;
    });
}
exports.register = register;
//# sourceMappingURL=completeResolve.js.map