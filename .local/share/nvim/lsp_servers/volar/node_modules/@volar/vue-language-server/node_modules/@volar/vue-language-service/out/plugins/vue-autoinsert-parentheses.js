"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode-languageserver-protocol");
const vue_language_service_types_1 = require("@volar/vue-language-service-types");
const vue_autoinsert_dotvalue_1 = require("./vue-autoinsert-dotvalue");
function default_1(options) {
    return {
        doAutoInsert(document, position, options_2) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const enabled = (_b = yield ((_a = (0, vue_language_service_types_1.useConfigurationHost)()) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.autoWrapParentheses'))) !== null && _b !== void 0 ? _b : true;
                if (!enabled)
                    return;
                if (!(0, vue_autoinsert_dotvalue_1.isCharacterTyping)(document, options_2))
                    return;
                const vueDocument = options.getVueDocument(document);
                if (!vueDocument)
                    return;
                const templateFormatScript = vueDocument.file.getTemplateFormattingScript();
                if (!templateFormatScript)
                    return;
                const offset = document.offsetAt(position);
                for (const mappedRange of templateFormatScript.sourceMap.mappings) {
                    if (mappedRange.sourceRange.end === offset) {
                        const text = document.getText().substring(mappedRange.sourceRange.start, mappedRange.sourceRange.end);
                        const ast = options.ts.createSourceFile(templateFormatScript.file.fileName, text, options.ts.ScriptTarget.Latest);
                        if (ast.statements.length === 1) {
                            const statement = ast.statements[0];
                            if (options.ts.isExpressionStatement(statement)
                                && options.ts.isAsExpression(statement.expression)
                                && options.ts.isTypeReferenceNode(statement.expression.type)
                                && options.ts.isIdentifier(statement.expression.type.typeName)
                                && statement.expression.type.typeName.text) {
                                return vscode.TextEdit.replace({
                                    start: document.positionAt(mappedRange.sourceRange.start),
                                    end: document.positionAt(mappedRange.sourceRange.end),
                                }, '(' + text + '$0' + ')');
                            }
                        }
                    }
                }
            });
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=vue-autoinsert-parentheses.js.map