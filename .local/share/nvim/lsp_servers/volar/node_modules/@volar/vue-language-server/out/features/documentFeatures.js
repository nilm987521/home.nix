"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
function register(connection, documents, vueDs) {
    connection.onDocumentFormatting(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.format(document, handler.options);
        });
    });
    connection.onDocumentRangeFormatting(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.format(document, handler.options, handler.range);
        });
    });
    connection.onDocumentOnTypeFormatting(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.format(document, handler.options, undefined, handler);
        });
    });
    connection.onSelectionRanges(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.getSelectionRanges(document, handler.positions);
        });
    });
    connection.onFoldingRanges(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.getFoldingRanges(document);
        });
    });
    connection.languages.onLinkedEditingRange(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.findLinkedEditingRanges(document, handler.position);
        });
    });
    connection.onDocumentSymbol(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.findDocumentSymbols(document);
        });
    });
    connection.onDocumentColor(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.findDocumentColors(document);
        });
    });
    connection.onColorPresentation(handler => {
        return worker(handler.textDocument.uri, document => {
            return vueDs.getColorPresentations(document, handler.color, handler.range);
        });
    });
    connection.onRequest(shared.AutoInsertRequest.type, (handler) => __awaiter(this, void 0, void 0, function* () {
        return worker(handler.textDocument.uri, document => {
            return vueDs.doAutoInsert(document, handler.position, handler.options);
        });
    }));
    function worker(uri, cb) {
        const document = documents.get(uri);
        if (document) {
            return cb(document);
        }
    }
}
exports.register = register;
//# sourceMappingURL=documentFeatures.js.map