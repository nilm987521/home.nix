"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const featureWorkers_1 = require("../utils/featureWorkers");
const dedupe = require("../utils/dedupe");
function register(context, api, isValidMappingData, isValidTeleportSideData) {
    return (uri, position) => {
        return (0, featureWorkers_1.languageFeatureWorker)(context, uri, position, function* (position, sourceMap) {
            for (const [mappedRange] of sourceMap.getMappedRanges(position, position, isValidMappingData)) {
                yield mappedRange.start;
            }
        }, (plugin, document, position, sourceMap) => __awaiter(this, void 0, void 0, function* () {
            const recursiveChecker = dedupe.createLocationSet();
            const result = [];
            yield withTeleports(document, position, undefined);
            return result;
            function withTeleports(document, position, originDefinition) {
                var _a, _b, _c;
                return __awaiter(this, void 0, void 0, function* () {
                    const _api = api === 'findDefinition' ? (_a = plugin.definition) === null || _a === void 0 ? void 0 : _a.on :
                        api === 'findTypeDefinition' ? (_b = plugin.definition) === null || _b === void 0 ? void 0 : _b.onType :
                            api === 'findImplementations' ? plugin.findImplementations :
                                undefined;
                    if (!_api)
                        return;
                    if (recursiveChecker.has({ uri: document.uri, range: { start: position, end: position } }))
                        return;
                    recursiveChecker.add({ uri: document.uri, range: { start: position, end: position } });
                    const definitions = (_c = yield (_api === null || _api === void 0 ? void 0 : _api(document, position))) !== null && _c !== void 0 ? _c : [];
                    for (const definition of definitions) {
                        let foundTeleport = false;
                        recursiveChecker.add({ uri: definition.targetUri, range: { start: definition.targetRange.start, end: definition.targetRange.start } });
                        const teleport = context.vueDocuments.teleportfromEmbeddedDocumentUri(definition.targetUri);
                        if (teleport) {
                            for (const [teleRange] of teleport.findTeleports(definition.targetSelectionRange.start, definition.targetSelectionRange.end, isValidTeleportSideData)) {
                                if (recursiveChecker.has({ uri: teleport.document.uri, range: { start: teleRange.start, end: teleRange.start } }))
                                    continue;
                                foundTeleport = true;
                                yield withTeleports(teleport.document, teleRange.start, originDefinition !== null && originDefinition !== void 0 ? originDefinition : definition);
                            }
                        }
                        if (!foundTeleport) {
                            if (originDefinition) {
                                result.push(Object.assign(Object.assign({}, definition), { originSelectionRange: originDefinition.originSelectionRange }));
                            }
                            else {
                                result.push(definition);
                            }
                        }
                    }
                });
            }
        }), (data, sourceMap) => data.map(link => {
            var _a, _b, _c;
            if (link.originSelectionRange && sourceMap) {
                const originSelectionRange = (_a = sourceMap.getSourceRange(link.originSelectionRange.start, link.originSelectionRange.end)) === null || _a === void 0 ? void 0 : _a[0];
                if (!originSelectionRange)
                    return;
                link.originSelectionRange = originSelectionRange;
            }
            const targetSourceMap = context.vueDocuments.sourceMapFromEmbeddedDocumentUri(link.targetUri);
            if (targetSourceMap) {
                const targetRange = (_b = targetSourceMap.getSourceRange(link.targetRange.start, link.targetRange.end)) === null || _b === void 0 ? void 0 : _b[0];
                const targetSelectionRange = (_c = targetSourceMap.getSourceRange(link.targetSelectionRange.start, link.targetSelectionRange.end)) === null || _c === void 0 ? void 0 : _c[0];
                if (!targetSelectionRange)
                    return;
                link.targetUri = targetSourceMap.sourceDocument.uri;
                link.targetRange = targetRange !== null && targetRange !== void 0 ? targetRange : targetSelectionRange; // loose range mapping to for template slots, slot properties
                link.targetSelectionRange = targetSelectionRange;
            }
            return link;
        }).filter(shared.notEmpty), arr => dedupe.withLocationLinks(arr.flat()));
    };
}
exports.register = register;
//# sourceMappingURL=definition.js.map