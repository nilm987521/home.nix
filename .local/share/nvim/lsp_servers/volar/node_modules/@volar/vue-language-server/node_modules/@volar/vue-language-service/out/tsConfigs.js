"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPreferences = exports.getFormatOptions = exports.getTsSettings = void 0;
function getTsSettings(configurationHost) {
    const tsSettings = {
        getFormatOptions: (document, options) => getFormatOptions(configurationHost, document, options),
        getPreferences: (document) => getPreferences(configurationHost, document),
    };
    return tsSettings;
}
exports.getTsSettings = getTsSettings;
function getFormatOptions(configurationHost, document, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    return __awaiter(this, void 0, void 0, function* () {
        let config = yield (configurationHost === null || configurationHost === void 0 ? void 0 : configurationHost.getConfiguration(isTypeScriptDocument(document) ? 'typescript.format' : 'javascript.format', document.uri));
        config = config !== null && config !== void 0 ? config : {};
        return {
            tabSize: options === null || options === void 0 ? void 0 : options.tabSize,
            indentSize: options === null || options === void 0 ? void 0 : options.tabSize,
            convertTabsToSpaces: options === null || options === void 0 ? void 0 : options.insertSpaces,
            // We can use \n here since the editor normalizes later on to its line endings.
            newLineCharacter: '\n',
            insertSpaceAfterCommaDelimiter: (_a = config.insertSpaceAfterCommaDelimiter) !== null && _a !== void 0 ? _a : true,
            insertSpaceAfterConstructor: (_b = config.insertSpaceAfterConstructor) !== null && _b !== void 0 ? _b : false,
            insertSpaceAfterSemicolonInForStatements: (_c = config.insertSpaceAfterSemicolonInForStatements) !== null && _c !== void 0 ? _c : true,
            insertSpaceBeforeAndAfterBinaryOperators: (_d = config.insertSpaceBeforeAndAfterBinaryOperators) !== null && _d !== void 0 ? _d : true,
            insertSpaceAfterKeywordsInControlFlowStatements: (_e = config.insertSpaceAfterKeywordsInControlFlowStatements) !== null && _e !== void 0 ? _e : true,
            insertSpaceAfterFunctionKeywordForAnonymousFunctions: (_f = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions) !== null && _f !== void 0 ? _f : true,
            insertSpaceBeforeFunctionParenthesis: (_g = config.insertSpaceBeforeFunctionParenthesis) !== null && _g !== void 0 ? _g : false,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: (_h = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis) !== null && _h !== void 0 ? _h : false,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: (_j = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets) !== null && _j !== void 0 ? _j : false,
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: (_k = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces) !== null && _k !== void 0 ? _k : true,
            insertSpaceAfterOpeningAndBeforeClosingEmptyBraces: (_l = config.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces) !== null && _l !== void 0 ? _l : true,
            insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: (_m = config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces) !== null && _m !== void 0 ? _m : false,
            insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: (_o = config.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces) !== null && _o !== void 0 ? _o : false,
            insertSpaceAfterTypeAssertion: (_p = config.insertSpaceAfterTypeAssertion) !== null && _p !== void 0 ? _p : false,
            placeOpenBraceOnNewLineForFunctions: (_q = config.placeOpenBraceOnNewLineForFunctions) !== null && _q !== void 0 ? _q : false,
            placeOpenBraceOnNewLineForControlBlocks: (_r = config.placeOpenBraceOnNewLineForControlBlocks) !== null && _r !== void 0 ? _r : false,
            semicolons: (_s = config.semicolons) !== null && _s !== void 0 ? _s : 'ignore',
        };
    });
}
exports.getFormatOptions = getFormatOptions;
function getPreferences(configurationHost, document) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
    return __awaiter(this, void 0, void 0, function* () {
        let config = yield (configurationHost === null || configurationHost === void 0 ? void 0 : configurationHost.getConfiguration(isTypeScriptDocument(document) ? 'typescript' : 'javascript', document.uri));
        let preferencesConfig = yield (configurationHost === null || configurationHost === void 0 ? void 0 : configurationHost.getConfiguration(isTypeScriptDocument(document) ? 'typescript.preferences' : 'javascript.preferences', document.uri));
        config = config !== null && config !== void 0 ? config : {};
        preferencesConfig = preferencesConfig !== null && preferencesConfig !== void 0 ? preferencesConfig : {};
        const preferences = {
            quotePreference: getQuoteStylePreference(preferencesConfig),
            importModuleSpecifierPreference: getImportModuleSpecifierPreference(preferencesConfig),
            importModuleSpecifierEnding: getImportModuleSpecifierEndingPreference(preferencesConfig),
            allowTextChangesInNewFiles: document.uri.startsWith('file://'),
            providePrefixAndSuffixTextForRename: ((_a = preferencesConfig.renameShorthandProperties) !== null && _a !== void 0 ? _a : true) === false ? false : ((_b = preferencesConfig.useAliasesForRenames) !== null && _b !== void 0 ? _b : true),
            // @ts-ignore
            allowRenameOfImportPath: true,
            includeAutomaticOptionalChainCompletions: (_d = (_c = config.suggest) === null || _c === void 0 ? void 0 : _c.includeAutomaticOptionalChainCompletions) !== null && _d !== void 0 ? _d : true,
            provideRefactorNotApplicableReason: true,
            generateReturnInDocTemplate: (_g = (_f = (_e = config.suggest) === null || _e === void 0 ? void 0 : _e.jsdoc) === null || _f === void 0 ? void 0 : _f.generateReturns) !== null && _g !== void 0 ? _g : true,
            includeCompletionsForImportStatements: (_j = (_h = config.suggest) === null || _h === void 0 ? void 0 : _h.includeCompletionsForImportStatements) !== null && _j !== void 0 ? _j : true,
            includeCompletionsWithSnippetText: (_l = (_k = config.suggest) === null || _k === void 0 ? void 0 : _k.includeCompletionsWithSnippetText) !== null && _l !== void 0 ? _l : true,
            allowIncompleteCompletions: true,
            displayPartsForJSDoc: true,
            // inlay hints
            includeInlayParameterNameHints: getInlayParameterNameHintsPreference(config),
            includeInlayParameterNameHintsWhenArgumentMatchesName: !((_p = (_o = (_m = config.inlayHints) === null || _m === void 0 ? void 0 : _m.parameterNames) === null || _o === void 0 ? void 0 : _o.suppressWhenArgumentMatchesName) !== null && _p !== void 0 ? _p : true),
            includeInlayFunctionParameterTypeHints: (_s = (_r = (_q = config.inlayHints) === null || _q === void 0 ? void 0 : _q.parameterTypes) === null || _r === void 0 ? void 0 : _r.enabled) !== null && _s !== void 0 ? _s : false,
            includeInlayVariableTypeHints: (_v = (_u = (_t = config.inlayHints) === null || _t === void 0 ? void 0 : _t.variableTypes) === null || _u === void 0 ? void 0 : _u.enabled) !== null && _v !== void 0 ? _v : false,
            includeInlayPropertyDeclarationTypeHints: (_y = (_x = (_w = config.inlayHints) === null || _w === void 0 ? void 0 : _w.propertyDeclarationTypes) === null || _x === void 0 ? void 0 : _x.enabled) !== null && _y !== void 0 ? _y : false,
            includeInlayFunctionLikeReturnTypeHints: (_1 = (_0 = (_z = config.inlayHints) === null || _z === void 0 ? void 0 : _z.functionLikeReturnTypes) === null || _0 === void 0 ? void 0 : _0.enabled) !== null && _1 !== void 0 ? _1 : false,
            includeInlayEnumMemberValueHints: (_4 = (_3 = (_2 = config.inlayHints) === null || _2 === void 0 ? void 0 : _2.enumMemberValues) === null || _3 === void 0 ? void 0 : _3.enabled) !== null && _4 !== void 0 ? _4 : false,
            // custom
            includeCompletionsForModuleExports: (_6 = (_5 = config.suggest) === null || _5 === void 0 ? void 0 : _5.autoImports) !== null && _6 !== void 0 ? _6 : true,
        };
        return preferences;
    });
}
exports.getPreferences = getPreferences;
function getQuoteStylePreference(config) {
    switch (config.quoteStyle) {
        case 'single': return 'single';
        case 'double': return 'double';
        default: return 'auto';
    }
}
function getImportModuleSpecifierPreference(config) {
    switch (config.importModuleSpecifier) {
        case 'project-relative': return 'project-relative';
        case 'relative': return 'relative';
        case 'non-relative': return 'non-relative';
        default: return undefined;
    }
}
function getImportModuleSpecifierEndingPreference(config) {
    switch (config.importModuleSpecifierEnding) {
        case 'minimal': return 'minimal';
        case 'index': return 'index';
        case 'js': return 'js';
        default: return 'auto';
    }
}
function isTypeScriptDocument(doc) {
    return ['typescript', 'typescriptreact'].includes(doc.languageId);
}
function getInlayParameterNameHintsPreference(config) {
    var _a, _b;
    switch ((_b = (_a = config.inlayHints) === null || _a === void 0 ? void 0 : _a.parameterNames) === null || _b === void 0 ? void 0 : _b.enabled) {
        case 'none': return 'none';
        case 'literals': return 'literals';
        case 'all': return 'all';
        default: return undefined;
    }
}
//# sourceMappingURL=tsConfigs.js.map