"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadCustomPlugins = exports.createLanguageServer = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const vscode = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const vue = require("@volar/vue-language-service");
const configHost_1 = require("./configHost");
const inferredCompilerOptions_1 = require("./inferredCompilerOptions");
const projects_1 = require("./projects");
function createLanguageServer(connection, runtimeEnv) {
    let clientCapabilities;
    connection.onInitialize((params) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        const options = params.initializationOptions;
        clientCapabilities = params.capabilities;
        let folders = [];
        let rootUri;
        if (((_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.workspaceFolders) && params.workspaceFolders) {
            folders = params.workspaceFolders
                .map(folder => vscode_uri_1.URI.parse(folder.uri))
                .filter(uri => uri.scheme === 'file')
                .map(uri => uri.fsPath);
        }
        else if (params.rootUri && (rootUri = vscode_uri_1.URI.parse(params.rootUri)).scheme === 'file') {
            folders = [rootUri.fsPath];
        }
        else if (params.rootPath) {
            folders = [params.rootPath];
        }
        const result = {
            capabilities: {
                textDocumentSync: vscode.TextDocumentSyncKind.Incremental,
            },
        };
        const configuration = ((_b = params.capabilities.workspace) === null || _b === void 0 ? void 0 : _b.configuration) ? connection.workspace : undefined;
        const ts = runtimeEnv.loadTypescript(options);
        const configHost = ((_c = params.capabilities.workspace) === null || _c === void 0 ? void 0 : _c.configuration) ? (0, configHost_1.createLsConfigs)(folders, connection) : undefined;
        if (options.documentFeatures) {
            const documentService = vue.getDocumentService({ typescript: ts }, configHost, runtimeEnv.fileSystemProvide, loadCustomPlugins(folders[0]));
            (yield Promise.resolve().then(() => require('./features/documentFeatures'))).register(connection, documents, documentService);
            (yield Promise.resolve().then(() => require('./registers/registerDocumentFeatures'))).register(options.documentFeatures, result.capabilities);
        }
        if (options.languageFeatures) {
            const tsLocalized = runtimeEnv.loadTypescriptLocalized(options);
            const projects = (0, projects_1.createProjects)(runtimeEnv, folders, ts, tsLocalized, options, documents, connection, configHost, () => (0, inferredCompilerOptions_1.getInferredCompilerOptions)(ts, configuration));
            (yield Promise.resolve().then(() => require('./features/customFeatures'))).register(connection, documents, projects);
            (yield Promise.resolve().then(() => require('./features/languageFeatures'))).register(ts, connection, documents, projects, options.languageFeatures, params);
            (yield Promise.resolve().then(() => require('./registers/registerlanguageFeatures'))).register(options.languageFeatures, vue.getSemanticTokenLegend(), result.capabilities);
        }
        return result;
    }));
    connection.onInitialized(() => {
        var _a, _b;
        if ((_b = (_a = clientCapabilities.workspace) === null || _a === void 0 ? void 0 : _a.didChangeConfiguration) === null || _b === void 0 ? void 0 : _b.dynamicRegistration) { // TODO
            connection.client.register(vscode.DidChangeConfigurationNotification.type);
        }
    });
    connection.listen();
    const documents = new vscode.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
    documents.listen(connection);
}
exports.createLanguageServer = createLanguageServer;
function loadCustomPlugins(dir) {
    var _a;
    try {
        const configPath = require.resolve('./volar.config.js', { paths: [dir] });
        const config = require(configPath);
        // console.warn('Found', configPath, 'and loaded', config.plugins?.length, 'plugins.');
        return (_a = config.plugins) !== null && _a !== void 0 ? _a : [];
    }
    catch (err) {
        // console.warn('No volar.config.js found in', dir);
        return [];
    }
}
exports.loadCustomPlugins = loadCustomPlugins;
//# sourceMappingURL=common.js.map