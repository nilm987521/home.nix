"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJsonDocument = exports.isTsDocument = void 0;
const semver = require("semver");
const vscode = require("vscode-languageserver-protocol");
function getBasicTriggerCharacters(tsVersion) {
    const triggerCharacters = ['.', '"', '\'', '`', '/', '<'];
    // https://github.com/microsoft/vscode/blob/8e65ae28d5fb8b3c931135da1a41edb9c80ae46f/extensions/typescript-language-features/src/languageFeatures/completions.ts#L811-L833
    if (semver.lt(tsVersion, '3.1.0') || semver.gte(tsVersion, '3.2.0')) {
        triggerCharacters.push('@');
    }
    if (semver.gte(tsVersion, '3.8.1')) {
        triggerCharacters.push('#');
    }
    if (semver.gte(tsVersion, '4.3.0')) {
        triggerCharacters.push(' ');
    }
    return triggerCharacters;
}
const jsDocTriggerCharacters = ['*'];
const directiveCommentTriggerCharacters = ['@'];
function default_1(options) {
    const basicTriggerCharacters = getBasicTriggerCharacters(options.tsVersion);
    return {
        complete: {
            triggerCharacters: [
                ...basicTriggerCharacters,
                ...jsDocTriggerCharacters,
                ...directiveCommentTriggerCharacters,
            ],
            on(document, position, context) {
                var _a, _b;
                return __awaiter(this, void 0, void 0, function* () {
                    if (isTsDocument(document)) {
                        let result = {
                            isIncomplete: false,
                            items: [],
                        };
                        if (!context || context.triggerKind !== vscode.CompletionTriggerKind.TriggerCharacter || (context.triggerCharacter && basicTriggerCharacters.includes(context.triggerCharacter))) {
                            const baseCompletionOptions = (_b = (_a = options.getBaseCompletionOptions) === null || _a === void 0 ? void 0 : _a.call(options, document.uri)) !== null && _b !== void 0 ? _b : [];
                            const completeOptions = Object.assign(Object.assign({}, baseCompletionOptions), { triggerCharacter: context === null || context === void 0 ? void 0 : context.triggerCharacter, triggerKind: context === null || context === void 0 ? void 0 : context.triggerKind });
                            const basicResult = yield options.getTsLs().doComplete(document.uri, position, completeOptions);
                            if (basicResult) {
                                result = basicResult;
                            }
                        }
                        if (!context || context.triggerKind !== vscode.CompletionTriggerKind.TriggerCharacter || (context.triggerCharacter && jsDocTriggerCharacters.includes(context.triggerCharacter))) {
                            const jsdocResult = yield options.getTsLs().doJsDocComplete(document.uri, position);
                            if (jsdocResult) {
                                result.items.push(jsdocResult);
                            }
                        }
                        if (!context || context.triggerKind !== vscode.CompletionTriggerKind.TriggerCharacter || (context.triggerCharacter && directiveCommentTriggerCharacters.includes(context.triggerCharacter))) {
                            const directiveCommentResult = yield options.getTsLs().doDirectiveCommentComplete(document.uri, position);
                            if (directiveCommentResult) {
                                result.items = result.items.concat(directiveCommentResult);
                            }
                        }
                        return result;
                    }
                });
            },
            resolve(item) {
                return options.getTsLs().doCompletionResolve(item);
            },
        },
        rename: {
            prepare(document, position) {
                if (isTsDocument(document)) {
                    return options.getTsLs().prepareRename(document.uri, position);
                }
            },
            on(document, position, newName) {
                if (isTsDocument(document) || isJsonDocument(document)) {
                    return options.getTsLs().doRename(document.uri, position, newName);
                }
            },
        },
        codeAction: {
            on(document, range, context) {
                if (isTsDocument(document)) {
                    return options.getTsLs().getCodeActions(document.uri, range, context);
                }
            },
            resolve(codeAction) {
                return options.getTsLs().doCodeActionResolve(codeAction);
            },
        },
        inlayHints: {
            on(document, range) {
                if (isTsDocument(document)) {
                    return options.getTsLs().getInlayHints(document.uri, range);
                }
            },
        },
        callHierarchy: {
            prepare(document, position) {
                if (isTsDocument(document)) {
                    return options.getTsLs().callHierarchy.doPrepare(document.uri, position);
                }
            },
            onIncomingCalls(item) {
                return options.getTsLs().callHierarchy.getIncomingCalls(item);
            },
            onOutgoingCalls(item) {
                return options.getTsLs().callHierarchy.getOutgoingCalls(item);
            },
        },
        definition: {
            on(document, position) {
                if (isTsDocument(document)) {
                    return options.getTsLs().findDefinition(document.uri, position);
                }
            },
            onType(document, position) {
                if (isTsDocument(document)) {
                    return options.getTsLs().findTypeDefinition(document.uri, position);
                }
            },
        },
        doValidation(document, options_2) {
            if (isTsDocument(document)) {
                return options.getTsLs().doValidation(document.uri, options_2);
            }
        },
        doHover(document, position) {
            if (isTsDocument(document)) {
                return options.getTsLs().doHover(document.uri, position);
            }
        },
        findImplementations(document, position) {
            if (isTsDocument(document)) {
                return options.getTsLs().findImplementations(document.uri, position);
            }
        },
        findReferences(document, position) {
            if (isTsDocument(document) || isJsonDocument(document)) {
                return options.getTsLs().findReferences(document.uri, position);
            }
        },
        findDocumentHighlights(document, position) {
            if (isTsDocument(document)) {
                return options.getTsLs().findDocumentHighlights(document.uri, position);
            }
        },
        findDocumentSymbols(document) {
            if (isTsDocument(document)) {
                return options.getTsLs().findDocumentSymbols(document.uri);
            }
        },
        findDocumentSemanticTokens(document, range, cancleToken) {
            if (isTsDocument(document)) {
                return options.getTsLs().getDocumentSemanticTokens(document.uri, range, cancleToken);
            }
        },
        findWorkspaceSymbols(query) {
            return options.getTsLs().findWorkspaceSymbols(query);
        },
        doFileRename(oldUri, newUri) {
            return options.getTsLs().getEditsForFileRename(oldUri, newUri);
        },
        getFoldingRanges(document) {
            if (isTsDocument(document)) {
                return options.getTsLs().getFoldingRanges(document.uri);
            }
        },
        getSelectionRanges(document, positions) {
            if (isTsDocument(document)) {
                return options.getTsLs().getSelectionRanges(document.uri, positions);
            }
        },
        getSignatureHelp(document, position, context) {
            if (isTsDocument(document)) {
                return options.getTsLs().getSignatureHelp(document.uri, position, context);
            }
        },
        format(document, range, options_2) {
            if (isTsDocument(document)) {
                return options.getTsLs().doFormatting.onRange(document.uri, options_2, range);
            }
        },
        formatOnType(document, position, key, options_2) {
            if (isTsDocument(document)) {
                return options.getTsLs().doFormatting.onType(document.uri, options_2, position, key);
            }
        },
    };
}
exports.default = default_1;
function isTsDocument(document) {
    return document.languageId === 'javascript' ||
        document.languageId === 'typescript' ||
        document.languageId === 'javascriptreact' ||
        document.languageId === 'typescriptreact';
}
exports.isTsDocument = isTsDocument;
function isJsonDocument(document) {
    return document.languageId === 'json' ||
        document.languageId === 'jsonc';
}
exports.isJsonDocument = isJsonDocument;
//# sourceMappingURL=typescript.js.map