"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalHostAvaliablePort = exports.isLocalHostPortUsing = void 0;
const http = require("http");
function isLocalHostPortUsing(port) {
    return new Promise(resolve => {
        http.get(`http://localhost:${port}/`, {
            headers: {
                accept: "*/*", // if not set, always get 404 from vite server
            },
        }, res => {
            resolve(res.statusCode === 200);
        }).on('error', () => resolve(false)).end();
    });
}
exports.isLocalHostPortUsing = isLocalHostPortUsing;
function getLocalHostAvaliablePort(port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield isLocalHostPortUsing(port)) {
            port++;
        }
        return port;
    });
}
exports.getLocalHostAvaliablePort = getLocalHostAvaliablePort;
//# sourceMappingURL=http.js.map