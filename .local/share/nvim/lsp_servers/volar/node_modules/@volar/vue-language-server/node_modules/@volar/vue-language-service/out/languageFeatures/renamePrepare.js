"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared_1 = require("@volar/shared");
const vscode = require("vscode-languageserver-protocol");
const featureWorkers_1 = require("../utils/featureWorkers");
// https://github.com/microsoft/vscode/blob/dcf27391b7dd7c1cece483806af75b4f87188e70/extensions/html/language-configuration.json#L35
const htmlWordPatterns = /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\\"\,\.\<\>\/\s]+)/g;
function register(context) {
    return (uri, position) => __awaiter(this, void 0, void 0, function* () {
        const document = context.getTextDocument(uri);
        const result = yield (0, featureWorkers_1.languageFeatureWorker)(context, uri, position, function* (position, sourceMap) {
            for (const [mappedRange] of sourceMap.getMappedRanges(position, position, data => typeof data.capabilities.rename === 'object' ? data.capabilities.rename.in : !!data.capabilities.rename)) {
                yield mappedRange.start;
            }
        }, (plugin, document, position) => { var _a, _b; return (_b = (_a = plugin.rename) === null || _a === void 0 ? void 0 : _a.prepare) === null || _b === void 0 ? void 0 : _b.call(_a, document, position); }, (data, sourceMap) => {
            var _a;
            if (sourceMap && vscode.Range.is(data))
                return (_a = sourceMap.getSourceRange(data.start, data.end)) === null || _a === void 0 ? void 0 : _a[0];
            return data;
        }, prepares => {
            for (const prepare of prepares) {
                if (vscode.Range.is(prepare)) {
                    return prepare; // if has any valid range, ignore other errors
                }
            }
            return prepares[0];
        });
        return result !== null && result !== void 0 ? result : (document ? (0, shared_1.getWordRange)(htmlWordPatterns, position, document) : undefined);
    });
}
exports.register = register;
//# sourceMappingURL=renamePrepare.js.map